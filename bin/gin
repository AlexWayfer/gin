#!/usr/bin/env ruby

$: << File.join(File.dirname(__FILE__), "../lib") if $0 == "bin/gin"
require 'rubygems'
require 'gin'
require 'optparse'

class Gin::Cmd

  def self.parse_args argv
    options = {}

    opts = OptionParser.new do |opt|
      opt.program_name = File.basename $0
      opt.version = Gin::VERSION
      opt.release = nil

      opt.banner = <<-STR

#{opt.program_name}-#{opt.version}

Create and control Gin applications.

  Usage:
    #{opt.program_name} --help
    #{opt.program_name} --version

    #{opt.program_name} <app-path> [options]

  Options:
      STR

      opt.on('-b', '--bare', 'Create lightweight Gin app') do
        options[:bare] = true
      end

      opt.on('-m', '--middleware', 'Create a Gin app as middleware') do
        options[:middleware] = true
      end

      opt.on('-A', '--assets', 'Render assets for the given Gin app') do
        options[:action] = :render_assets
      end

      opt.separator nil

      opt.on('-h', '--help', 'Print this help screen') do
        puts opt
        exit
      end

      opt.on('-v', '--version', 'Output Gin version and exit') do
        puts Gin::VERSION
        exit
      end

      opt.separator nil
    end

    opts.parse! argv

    options[:app_path] = argv.shift
    error("Missing app-path argument. Use gin -h for help.") if
      !options[:app_path]

    error("Invalid arguments #{argv.join(", ")}.") unless argv.empty?

    options
  end


  def self.run argv=ARGV
    options = parse_args(argv)

    case options[:action]
    when :render_assets
      render_assets(options)
    else
      create_app(options)
    end
  end


  def self.render_assets options
    app_path = File.expand_path(options[:app_path])
    app_filepath = nil

    if File.file?(app_path)
      app_filepath = app_path

    elsif File.directory?(app_path)
      ["#{File.basename(app_path)}.rb", "app.rb", "application.rb"].each do |name|
        filepath = File.join(app_path, name)
        app_filepath = filepath and break if File.file?(filepath)
      end
    end

    error("No such file or directory: #{options[:app_path]}") if !app_filepath

    $: << File.dirname(app_filepath)
    require app_filepath

    Gin::App.each do |app_klass|
      puts "Generating assets for #{app_klass.name}..."
      app_klass.new(:force_asset_pipeline => false).send(:create_asset_pipeline)
    end
  end


  def self.create_app options
    bare = options[:bare]
    path = options[:app_path].sub(/\.\w+$/, '')
    standalone = !options[:middleware]

    name = File.basename(path)
    dir  = File.expand_path(path)

    make_dirs(dir, bare)

    app_class_name = Gin.camelize(name)
    make_config_ru(app_class_name, name, dir) if standalone
    make_console(name, dir) if standalone
    make_app_rb(app_class_name, name, dir, standalone)
    make_home_ctrl_rb(app_class_name, name, dir)

    puts "You're all set! Your new app is waiting at #{dir}.\n\n"
    exit 0
  end


  def self.error msg
    $stderr.puts "#{msg}\n\n"
    exit 1
  end


  def self.make_dirs dir, bare=false
    error("Can't create directory: #{dir} already exists") if File.directory?(dir)

    Dir.mkdir(dir)

    unless bare
      Dir.mkdir(File.join(dir, "views"))
      Dir.mkdir(File.join(dir, "layouts"))
      Dir.mkdir(File.join(dir, "public"))
      Dir.mkdir(File.join(dir, "public", "js"))
      Dir.mkdir(File.join(dir, "public", "css"))
      Dir.mkdir(File.join(dir, "public", "img"))
    end

    Dir.mkdir(File.join(dir, "lib"))
    Dir.mkdir(File.join(dir, "config"))
    Dir.mkdir(File.join(dir, "controllers"))
  end


  def self.make_home_ctrl_rb app_class_name, name, dir
    contents = <<-STR
class #{app_class_name}::HomeController < Gin::Controller
  def index
<<-HTML
<!DOCTYPE html>
<html>
  <head>
    <title>Welcome to Gin</title>
    <link rel="stylesheet" type="text/css" href="/gin.css"/>
  </head>
  <body style="">
    <div class="canvas">
      <img src="/gin_sm.png" class="logo"/>
      <h1>Welcome to Gin</h1>
      <p>Gin is a lightweight framework geared towards API and Website development.</br>
Start building your app by editing your app's root <strong>.rb</strong> file and 
your <strong>HomeController</strong> at <strong>controllers/home_controller.rb</strong>.</p>
      <p><center>The <a href="http://yaks.me/gin/wiki" target="_blank">WIKI</a> is available for help and documentation.
      </center></p>
    </div>
  </body>
</html>
HTML
  end
end
    STR

    File.write(File.join(dir, "controllers/home_controller.rb"), contents)
  end


  def self.make_app_rb app_class_name, name, dir, standalone
    contents = <<-STR
require 'gin'

$:.unshift( File.expand_path('../lib', __FILE__) )
#{"$:.unshift( File.expand_path('../controllers', __FILE__) )\n" if standalone}

class #{app_class_name} < Gin::App
  require '#{"#{name}/controllers/" if !standalone}home_controller'
  mount #{app_class_name}::HomeController, "/"
end
    STR

    File.write(File.join(dir, "#{name}.rb"), contents)
  end


  def self.make_config_ru app_class_name, name, dir
    contents = <<-STR
$:.unshift File.expand_path("..", __FILE__)
require '#{name}'
run #{app_class_name}.new
    STR

    filepath = File.join(dir, 'config.ru')
    File.write(filepath, contents)
  end


  def self.make_console name, dir
    filepath = File.join(dir, 'console')
    bash = "irb -I \"$( dirname \"${BASH_SOURCE[0]}\" )\" -r #{name}\n"
    File.write(filepath, bash)
    require 'fileutils'
    FileUtils.chmod "u=wrx,go=rx", filepath
  end
end


Gin::Cmd.run
